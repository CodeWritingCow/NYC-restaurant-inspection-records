<!DOCTYPE html>
<html>
    <head>
        <meta charset="utf-8">
        <title>NYC Food Safety</title>
		<!-- Compiled and minified CSS -->
		<link rel="preload" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
		<noscript><link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css"></noscript>

		<!--Import Google Icon Font-->
		<link rel="preload" href="https://fonts.googleapis.com/icon?family=Material+Icons" as="style" onload="this.onload=null;this.rel='stylesheet'">
        <noscript><link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons"></noscript>

		<!-- Custom CSS -->
		<link rel="preload" href="/public/assets/css/main.css" as="style" onload="this.onload=null;this.rel='stylesheet'">
		<noscript><link rel="stylesheet" href="/public/assets/css/main.css"></noscript>

		<script>
			/*! loadCSS. [c]2017 Filament Group, Inc. MIT License */
			/* This file is meant as a standalone workflow for
			- testing support for link[rel=preload]
			- enabling async CSS loading in browsers that do not support rel=preload
			- applying rel preload css once loaded, whether supported or not.
			*/
			(function( w ){
				"use strict";
				// rel=preload support test
				if( !w.loadCSS ){
					w.loadCSS = function(){};
				}
				// define on the loadCSS obj
				var rp = loadCSS.relpreload = {};
				// rel=preload feature support test
				// runs once and returns a function for compat purposes
				rp.support = (function(){
					var ret;
					try {
						ret = w.document.createElement( "link" ).relList.supports( "preload" );
					} catch (e) {
						ret = false;
					}
					return function(){
						return ret;
					};
				})();

				// if preload isn't supported, get an asynchronous load by using a non-matching media attribute
				// then change that media back to its intended value on load
				rp.bindMediaToggle = function( link ){
					// remember existing media attr for ultimate state, or default to 'all'
					var finalMedia = link.media || "all";

					function enableStylesheet(){
						// unbind listeners
						if( link.addEventListener ){
							link.removeEventListener( "load", enableStylesheet );
						} else if( link.attachEvent ){
							link.detachEvent( "onload", enableStylesheet );
						}
						link.setAttribute( "onload", null ); 
						link.media = finalMedia;
					}

					// bind load handlers to enable media
					if( link.addEventListener ){
						link.addEventListener( "load", enableStylesheet );
					} else if( link.attachEvent ){
						link.attachEvent( "onload", enableStylesheet );
					}

					// Set rel and non-applicable media type to start an async request
					// note: timeout allows this to happen async to let rendering continue in IE
					setTimeout(function(){
						link.rel = "stylesheet";
						link.media = "only x";
					});
					// also enable media after 3 seconds,
					// which will catch very old browsers (android 2.x, old firefox) that don't support onload on link
					setTimeout( enableStylesheet, 3000 );
				};

				// loop through link elements in DOM
				rp.poly = function(){
					// double check this to prevent external calls from running
					if( rp.support() ){
						return;
					}
					var links = w.document.getElementsByTagName( "link" );
					for( var i = 0; i < links.length; i++ ){
						var link = links[ i ];
						// qualify links to those with rel=preload and as=style attrs
						if( link.rel === "preload" && link.getAttribute( "as" ) === "style" && !link.getAttribute( "data-loadcss" ) ){
							// prevent rerunning on link
							link.setAttribute( "data-loadcss", true );
							// bind listeners to toggle media back
							rp.bindMediaToggle( link );
						}
					}
				};

				// if unsupported, run the polyfill
				if( !rp.support() ){
					// run once at least
					rp.poly();

					// rerun poly on an interval until onload
					var run = w.setInterval( rp.poly, 500 );
					if( w.addEventListener ){
						w.addEventListener( "load", function(){
							rp.poly();
							w.clearInterval( run );
						} );
					} else if( w.attachEvent ){
						w.attachEvent( "onload", function(){
							rp.poly();
							w.clearInterval( run );
						} );
					}
				}


				// commonjs
				if( typeof exports !== "undefined" ){
					exports.loadCSS = loadCSS;
				}
				else {
					w.loadCSS = loadCSS;
				}
			}( typeof global !== "undefined" ? global : this ) );
		</script>

        <!--Let browser know website is optimized for mobile-->
        <meta name="viewport" content="width=device-width, initial-scale=1.0"/>

				<!--  Meta tags for social media sharing -->
				<meta property="og:title" content="NYC Food Safety">
				<meta property="og:description" content="Find a New York City restaurant's health inspection records">
				<meta property="og:image" content="https://nyc-restaurant-inspector.herokuapp.com/public/assets/img/kevin-curtis-3308-unsplash-1024x676.jpg">
				<meta property="og:url" content="http://www.nycfoodsafety.org">
				<meta name="twitter:card" content="summary_large_image">
				
				<meta property="og:site_name" content="NYC Food Safety">
				<meta name="twitter:image:alt" content="Dinner social, conversation and bar. Photo by Kevin Curtis on Unsplash.com.">
    </head>
    <body>

    	{{> header}}

			<div class="parallax-container hide-on-small-only valign-wrapper">
				<div class="parallax">
					<img id="parallaxImg" src="https://res.cloudinary.com/hg7jltnn9/image/upload/f_auto,q_auto/v1562031452/public/assets/img/blank-black-picture_wsxz8k.jpg" alt="Blank black picture is placeholder image">
				</div>
				{{> searchFormParallax}}
			</div>

    	<div class="blue-grey lighten-5 hide-on-med-and-up">
	    	<main class="container" style="padding: 30px;">
			    <h3 class="teal-text text-lighten-2" style="font-weight: bold;">{{pageTitle}}</h3>
		    	<div class="section">
			    	{{> searchForm}}    	
		    	</div>
	    	</main>
    	</div>

		<div class="container">
		    <div class="section">

		      <!--   Icon Section   -->
		      <div class="row">
		        <div class="col s12 m4">
		          <div class="icon-block">
		            <h2 class="center teal-text text-lighten-2"><i class="material-icons medium">restaurant_menu</i></h2>
		            <h5 class="center">24,000 restaurants</h5>

		            <p class="light">New York City has about 24,000 restaurants. City health inspectors check them for compliance with food-safety regulations at least once a year. Find out if your favorite restaurant passes muster or not!</p>
		          </div>
		        </div>

		        <div class="col s12 m4">
		          <div class="icon-block">
		            <h2 class="center teal-text text-lighten-2"><i class="material-icons medium">local_cafe</i></h2>
		            <h5 class="center">Health violations</h5>

		            <p class="light"> Inspectors look for violations such as failure to keep food at a safe temperature; presence of flies and vermin; and improperly sanitized cooking utensils. They can close restaurants that have serious and persistent violations.</p>
		          </div>
		        </div>

		        <div class="col s12 m4">
		          <div class="icon-block">
		            <h2 class="center teal-text text-lighten-2"><i class="material-icons medium">report_problem</i></h2>
		            <h5 class="center">Report a problem</h5>

		            <p class="light">You can <a href="/report-violations">file complaints online</a> about problems with food safety or food poisoning at restaurants in New York City.</p>
		          </div>
		        </div>
		      </div>

		    </div>
		    <br><br>
		  </div>

    	{{> footer}}
    </body>

	<!-- Compiled and minified JavaScript -->
	<script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/js/materialize.min.js"></script>
	<script>
		document.addEventListener('DOMContentLoaded', function(){
			let formSelects = M.FormSelect.init(document.querySelectorAll('select'));
			let sidenav = M.Sidenav.init(document.querySelectorAll('.sidenav'));
			let parallaxes = M.Parallax.init(document.querySelectorAll('.parallax'));
			let links = document.getElementsByClassName('li-home');
			
			for (let i = 0; i < links.length; i++) {
				links[i].classList.add('active');
			}
		});
	</script>
	<script type="text/javascript" src="/public/assets/javascript/randomImg.js"></script>
</html>